%% Main function for the pipline of sample generation
function [samples_noised, labels_up] = sampleGeneratorHelper(paras)
    % generate Sample parameters
    paras = generateSampleParas(paras);
    % generate moleculars
    moleculars = generateMoleculars(paras);       % double normalized
    % generate samples
    samples = generateSamples(paras, moleculars); % double normalized
    samples_noised = addNoise(paras, samples);    % double normalized
    % generate labels/ground truth
    labels_up = generateLabelsUp(paras);          % double normalized
    
    return

    % print size of file
    fprintf("moleculars (MB): " + ((whos("moleculars").bytes)/(1024^2)) + "\n")
    fprintf("samples    (MB): " + ((whos("samples").bytes)/(1024^2)) + "\n")
    fprintf("labels_up  (MB): " + ((whos("labels_up").bytes)/(1024^2)) + "\n")
    
    % save as .tif for illustration
    if exist(mfilename, 'dir'), rmdir(mfilename, 's'); end
    mkdir(mfilename);
    save(fullfile(mfilename, "paras"), "paras")
    saveFrames(mfilename, "moleculars", moleculars)
    saveFrames(mfilename, "samples", samples)
    saveFrames(mfilename, "samples_noised", samples_noised)
    saveFrames(mfilename, "labels_up", labels_up)
end

%% Generate Sample parameters

function paras = generateSampleParas(paras)
    % Descriptions:
    % - This function will use basic parameters to randomly generate
    %   sample parameters that used to generate sample.
    % - Basic parameters can help us generate sample with same
    %   distribution but not exatly same. To save a dataset, sample
    %   parameters generated by this function need to be saved so that we
    %   do not need to save the save to save memeory and avoid I/O
    %   performance.
    % Rules:
    % - We load all basic parameters needed at begining and save all the
    %   sample parameters at the end of function. We won't access or modity
    %   the paras during function.
    % - When generting parameters, we use double and do not round the
    %   data. We will do all the dtype change or round the float at the
    %   end of function, when saving parameter.
    % Output:
    %   (D stands for number of dimensions, i.e., length(DimFrame))
    % - mu_set    [D         *  NumMolecule]    double  non-rounded
    % - cov_set   [D         *  NumMolecule]    double  non-rounded
    % - lum_set   [             NumMolecule]    double  non-rounded
    % - mask_set  [NumFrame  *  NumMolecule]    logical

    % load parameters we will use
    NumMolecule = paras.NumMolecule;
    NumFrame    = paras.NumFrame;
    DimFrame    = paras.DimFrame;
    PixelSize   = paras.PixelSize;
    StdRange    = paras.StdRange;
    LumRange    = paras.LumRange;
    AppearRange = paras.AppearRange;

    D = length(DimFrame);  % number of dimensions

    % 1. mu set, [D * NumMolecule]
    mu_set = (DimFrame-1)' .* rand([D, NumMolecule]) + 1;
    mu_set = sortrows(mu_set');
    mu_set = mu_set';

    % 2. covariance set, [D * D * NumMolecule]
    cov_set = zeros(D, NumMolecule);
    % pixel size correction
    StdRange = StdRange .* (PixelSize(1) ./ PixelSize');  % [D * 2]
    for n = 1:NumMolecule
        cov_set(:, n) = (StdRange(:, 2) - StdRange(:, 1)) .* rand([D, 1]);
        cov_set(:, n) = cov_set(:, n) + StdRange(:, 1);
    end

    % 3. luminance set, [NumMolecule]
    lum_set = (LumRange(2) - LumRange(1)) * rand([1, NumMolecule]);
    lum_set = lum_set + LumRange(1);

    % 4. mask set, [NumFrame, NumMolecule]
    % determine how many moleculars will appear in each frame
    NumRange = round(NumMolecule * AppearRange);
    num_appear_set = randi(NumRange, [NumFrame, 1]);
    % create a mask stands which moleculars will appear in each frame
    mask_set = zeros(NumFrame, NumMolecule);
    for n = 1:NumFrame
        index = randperm(NumMolecule, num_appear_set(n));
        mask_set(n, index) = 1;  % mask of a molecular is 1 if appear
    end

    % save sample parameters in 'paras,' change dtype/rounded meantime
    paras.mu_set    = mu_set;
    paras.cov_set   = cov_set;
    paras.lum_set   = lum_set;
    paras.mask_set  = logical(mask_set);
end

%% Generate moleculars

function molecular = generateMolecular(paras, m)
    % load parameters we will use
    DimFrame    = paras.DimFrame;
    mu          = paras.mu_set(:, m);
    cov         = paras.cov_set(:, m);
    lum         = paras.lum_set(m);

    D = length(DimFrame);  % number of dimensions

    % take a slice around the mu where the radia is 5 * std
    radius      = ceil(5 * sqrt(cov));
    lower       = floor(max(mu - radius, ones(D, 1)));
    upper       = ceil(min(mu + radius, DimFrame'));
    diameter    = upper - lower + 1;

    % build coordinate system of the slice
    % We use 'ndgrid' instead of 'meshgrid' to match the coordinate system 
    % of the mu/lower/upper above.
    % For example, if diameter is [11 13 8], meshgrid will return three
    % [13 11 8] matrix but ndgrid return three [11 13 8] matrix.
    % 'meshgrid' use Cartesian coordinate system, i.e. 11 is range of
    % x-axis/column, 13 is range of y-axis/row.
    % 'ndgrid' use matrix coordinate system, i.e. 11 is range of y-axis/row
    % and 13 is range of x-axis/column.
    % Above, for mu/lower/upper, we use matrix coordinate system, thus here
    % we use 'ndgrid'
    index = arrayfun(@(l, u) l:u, lower, upper, 'UniformOutput', false);
    grid_cell = cell(1, D);
    [grid_cell{:}] = ndgrid(index{:});
    coord = cat(D+1, grid_cell{:});                 % [y, x, (z), D]
    coord = reshape(coord, [], D);                  % [yx(z), D]

    % compute the probability density for each point/pixel in slice
    pdf_values = mvnpdf(coord, mu', diag(cov));           % [yx(z), D]

    % set the luminate
    pdf_values = pdf_values * lum / max(pdf_values(:));

    % put the slice back to whole frame to get single molecular frame
    molecular = zeros(DimFrame);
    for i = 1:prod(diameter)
        idx = cellfun(@(x) x(i), grid_cell, 'UniformOutput', false);
        molecular(idx{:}) = pdf_values(i);
    end
end

function moleculars = generateMoleculars(paras)
    % load parameters we will use
    NumMolecule = paras.NumMolecule;
    DimFrame    = paras.DimFrame;

    moleculars = zeros([NumMolecule, DimFrame]);
    for m = 1:NumMolecule
        molecular = generateMolecular(paras, m);
        moleculars(m, :) = molecular(:);
    end
end

%% Generate samples

function samples = generateSamples(paras, moleculars)
    % load parameters we will use
    NumFrame    = paras.NumFrame;
    DimFrame    = paras.DimFrame;
    mask_set    = paras.mask_set;

    samples = reshape(mask_set * moleculars(:, :), [NumFrame, DimFrame]);
end

function samples_noised = addNoise(paras, samples)
    % load parameters we will use
    noise_mu    = paras.noise_mu;
    noise_var   = paras.noise_var;
    
    samples_noised = imnoise(samples, "gaussian", noise_mu, noise_var);
end

%% Generate labels/ground truth

function labels_up = generateLabelsUp(paras)
    % load parameters we will use
    NumMolecule = paras.NumMolecule;
    NumFrame    = paras.NumFrame;
    DimFrame    = paras.DimFrame;
    UpSampling  = paras.UpSampling;
    mu_set      = paras.mu_set;
    lum_set     = paras.lum_set;
    mask_set    = paras.mask_set;

    DimFrame_up = UpSampling  .* DimFrame;
    mu_set_up   = UpSampling' .* mu_set;
    
    labels_up = zeros([NumFrame, DimFrame_up]);
    for f = 1:NumFrame
        for m = 1:NumMolecule
            mu_up = round(mu_set_up(:, m));
            index = arrayfun(@(x) x, mu_up, 'UniformOutput', false);
            labels_up(f, index{:}) = lum_set(m) * mask_set(f, m);
        end
    end
end

%% Help function for save frames into .tif file

function [] = saveTif(path, frame)
    % input frame is normalized float
    frame = uint8(round(frame*255));
    DimFrame = size(frame);
    if length(DimFrame) == 2
        imwrite(frame, path+".tif", ...
            'WriteMode', 'overwrite',  'Compression','none');
    end
    if length(DimFrame) == 3
        imwrite(frame(:, :, 1), path+".tif", ...
            'WriteMode', 'overwrite',  'Compression','none');
        for d = 2:DimFrame(3)
            imwrite(frame(:, :, d), path+".tif", ...
                'WriteMode', 'append',  'Compression','none');
        end
    end
end

function [] = saveFrames(fold, subfold, frames)
    % .tif is for illustration purposes only, the files saved are not
    % dependence of other function
    shape = size(frames);
    NumFrame = shape(1);
    DimFrame = shape(2:end);

    % creat the subfold to store tif
    mkdir(fullfile(fold, subfold));
    for f = 1:NumFrame
        filename = f + "_" + subfold + "_" + fold;
        path = fullfile(fold, subfold, filename);
        saveTif(path, reshape(frames(f, :), DimFrame));
    end
end
